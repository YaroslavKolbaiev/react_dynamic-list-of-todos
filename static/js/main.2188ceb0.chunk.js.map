{"version":3,"sources":["components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","api.ts","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["TodoList","todos","selectedTodoId","setTodoId","className","map","todo","id","completed","classNames","title","type","onClick","TodoFilter","setTodos","useState","query","setQuery","filterType","setFilterType","useEffect","filter","toLowerCase","includes","trim","onChange","event","target","value","placeholder","style","pointerEvents","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","Loader","TodoModal","selectedTodo","user","setUser","fetchUser","a","userId","userFromServer","href","email","name","App","visibleTodos","setVisibleTodos","todoId","loading","setLoading","hasError","setError","fetchTodos","todosFromServer","find","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2188ceb0.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport React from 'react';\n\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[]\n  selectedTodoId: number\n  setTodoId: (id: number) => void\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  selectedTodoId,\n  setTodoId,\n}) => (\n  <table className=\"table is-narrow is-fullwidth\">\n    <thead>\n      <tr>\n        <th>#</th>\n        <th>\n          <span className=\"icon\">\n            <i className=\"fas fa-check\" />\n          </span>\n        </th>\n        <th>Title</th>\n        <th> </th>\n      </tr>\n    </thead>\n\n    <tbody>\n      {todos.map(todo => (\n        <tr key={todo.id} data-cy=\"todo\" className=\"\">\n          <td className=\"is-vcentered\">{todo.id}</td>\n          <td className=\"is-vcentered\">\n            {todo.completed && (\n              <span className=\"icon\">\n                <i className=\"fas fa-check\" />\n              </span>\n            )}\n          </td>\n          <td className=\"is-vcentered is-expanded\">\n            <p className={classNames('has-text-success',\n              { 'has-text-danger': !todo.completed })}\n            >\n              {todo.title}\n            </p>\n          </td>\n          <td className=\"has-text-right is-vcentered\">\n            {selectedTodoId === todo.id\n              ? (\n                <button\n                  data-cy=\"selectButton\"\n                  className=\"button\"\n                  type=\"button\"\n                  onClick={() => {\n                    setTodoId(0);\n                  }}\n                >\n                  <span className=\"icon\">\n                    <i className=\"far fa-eye-slash\" />\n                  </span>\n                </button>\n              )\n              : (\n                <button\n                  data-cy=\"selectButton\"\n                  className=\"button\"\n                  type=\"button\"\n                  onClick={() => {\n                    setTodoId(todo.id);\n                  }}\n                >\n                  <span className=\"icon\">\n                    <i className=\"far fa-eye\" />\n                  </span>\n                </button>\n              )}\n          </td>\n        </tr>\n      ))}\n    </tbody>\n  </table>\n);\n","import React, { Dispatch, useEffect, useState } from 'react';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[]\n  setTodos: Dispatch<Todo[]>\n};\n\nexport const TodoFilter: React.FC<Props> = ({\n  todos,\n  setTodos,\n}) => {\n  const [query, setQuery] = useState('');\n  const [filterType, setFilterType] = useState('all');\n\n  useEffect(() => {\n    setTodos(todos.filter(todo => (\n      todo.title.toLowerCase().includes(query.trim().toLowerCase())\n    )).filter(todo => {\n      switch (filterType) {\n        case 'all':\n          return true;\n        case 'active':\n          return !todo.completed;\n        case 'completed':\n          return todo.completed;\n        default:\n          return 'Hello World';\n      }\n    }));\n  }, [query, filterType]);\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            onChange={(event) => {\n              setFilterType(event.target.value);\n            }}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={(event) => {\n            setQuery(event.target.value);\n          }}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n          <button\n            data-cy=\"clearSearchButton\"\n            type=\"button\"\n            className=\"delete\"\n            onClick={() => {\n              setQuery('');\n            }}\n          />\n        </span>\n      </p>\n    </form>\n  );\n};\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(1000)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number | undefined) => get<User>(`/users/${userId}`);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { Dispatch, useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { getUser } from '../../api';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\n\ntype Props = {\n  selectedTodo: Todo | undefined\n  setTodoId: Dispatch<number>\n};\n\nexport const TodoModal: React.FC<Props> = ({\n  selectedTodo,\n  setTodoId,\n}) => {\n  const [user, setUser] = useState<User>();\n\n  useEffect(() => {\n    const fetchUser = async () => {\n      const userFromServer = await getUser(selectedTodo?.userId);\n\n      setUser(userFromServer);\n    };\n\n    fetchUser();\n  }, [selectedTodo?.userId]);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!user ? (\n        <Loader />\n      ) : (\n\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo ${selectedTodo?.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => {\n                setTodoId(0);\n              }}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {selectedTodo?.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {selectedTodo?.completed ? (\n                <strong className=\"has-text-success\">Done</strong>\n              ) : (\n                <strong className=\"has-text-danger\">Planned</strong>\n              )}\n\n              {' by '}\n\n              <a href={user?.email}>\n                {user?.name}\n              </a>\n            </p>\n          </div>\n        </div>\n\n      )}\n\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { getTodos } from './api';\nimport { Todo } from './types/Todo';\nimport { Loader } from './components/Loader';\n\nimport { TodoModal } from './components/TodoModal';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [visibleTodos, setVisibleTodos] = useState(todos);\n  const [todoId, setTodoId] = useState(0);\n  const [loading, setLoading] = useState(false);\n  const [hasError, setError] = useState(false);\n\n  useEffect(() => {\n    const fetchTodos = async () => {\n      setLoading(true);\n      setError(false);\n\n      try {\n        const todosFromServer = await getTodos();\n\n        setTodos(todosFromServer);\n        setVisibleTodos(todosFromServer);\n        setLoading(false);\n      } catch (error) {\n        setError(true);\n        setLoading(false);\n      }\n    };\n\n    fetchTodos();\n  }, []);\n\n  const selectedTodo = todos.find(todo => todo.id === todoId);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter todos={todos} setTodos={setVisibleTodos} />\n            </div>\n\n            <div className=\"block\">\n              {loading\n                ? <Loader />\n                : (\n                  <TodoList\n                    todos={visibleTodos}\n                    selectedTodoId={todoId}\n                    setTodoId={(id) => setTodoId(id)}\n                  />\n                )}\n              {hasError && <h1 className=\"has-text-danger\">Something went wrong</h1> }\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {todoId !== 0\n        && (\n          <TodoModal\n            selectedTodo={selectedTodo}\n            setTodoId={setTodoId}\n          />\n        )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}